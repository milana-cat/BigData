import streamlit as st
import requests
from PIL import Image
from io import BytesIO
import base64

st.set_page_config(layout="wide")

API_URL = "http://localhost:8501"

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
def get_data(endpoint):
    try:
        response = requests.get(f"{API_URL}/{endpoint}", timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API ({endpoint}): {e}")
        return None

def show_stats(stats):
    if not stats:
        st.warning("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {stats['num_rows']}")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {stats['num_cols']}")
    st.write(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {stats['memory_usage']:.2f} –ú–ë")
    
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    for col, values in stats['num_stats'].items():
        st.write(f"""
        **{col}**:  
        - –ú–∏–Ω–∏–º—É–º: {values['min']:.2f}  
        - –°—Ä–µ–¥–Ω–µ–µ: {values['mean']:.2f}  
        - –ú–µ–¥–∏–∞–Ω–∞: {values['median']:.2f}  
        - –ú–∞–∫—Å–∏–º—É–º: {values['max']:.2f}  
        - 25-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {values['25%']:.2f}  
        - 75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {values['75%']:.2f}
        """)

    if stats['cat_stats']:
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        for col, values in stats['cat_stats'].items():
            st.write(f"""
            **{col}**:  
            - –ú–æ–¥–∞: {values['mode']}  
            - –ß–∞—Å—Ç–æ—Ç–∞: {values['count']}
            """)

def show_regression(metrics, images):
    if not metrics:
        st.warning("–ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
    for model, scores in metrics.items():
        st.write(f"**{model}**")
        st.write(f"MAE: {scores['MAE']:.2f}")
        st.write(f"R¬≤: {scores['R2']:.4f}")
    
    if images:
        st.subheader("–ì—Ä–∞—Ñ–∏–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
        cols = st.columns(len(images))
        for i, img_base64 in enumerate(images):
            try:
                image = Image.open(BytesIO(base64.b64decode(img_base64)))
                cols[i].image(image, use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        st.info("–ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

def main():
    st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    tab1, tab2 = st.tabs(["AutoML", "üç∑ WineQT"])
    
    with tab1:
        data = get_data("AutoML")
        if data:
            tab_stats, tab_reg = st.tabs(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–†–µ–≥—Ä–µ—Å—Å–∏—è"])
            with tab_stats:
                show_stats(data.get('stats'))
            with tab_reg:
                show_regression(data.get('regression_metrics'), data.get('regression_plots'))

    with tab2:
        data = get_data("housing")
        if data:
            tab_stats, tab_reg = st.tabs(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–†–µ–≥—Ä–µ—Å—Å–∏—è"])
            with tab_stats:
                show_stats(data.get('stats'))
            with tab_reg:
                show_regression(data.get('regression_metrics'), data.get('regression_plots'))

if __name__ == "__main__":
    main()
